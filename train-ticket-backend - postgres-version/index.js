// ‚úÖ Core dependencies
const express = require("express");
const cors = require("cors");
require("dotenv").config(); // Load environment variables from .env

// ‚úÖ Database (Sequelize models)
const db = require("./middleware/models");

// ‚úÖ Logging tools
const morgan = require("morgan");
const logger = require("./utils/logger");                  // Custom Winston logger
const requestLogger = require("./controllers/requestLogger"); // Custom middleware logger

const app = express();
const PORT = process.env.PORT; // ‚ö†Ô∏è Do NOT fallback to 8080 ‚Äî Render assigns dynamic port

// ‚úÖ Log all incoming requests using custom middleware
app.use(requestLogger);

// ‚úÖ HTTP logging (Morgan piped to Winston)
const stream = {
  write: (message) => logger.http(message.trim()),
};
app.use(morgan("combined", { stream }));

// ‚úÖ Global middleware
app.use(cors());                                 // Enable cross-origin access
app.use(express.json());                         // Parse JSON body
app.use(express.urlencoded({ extended: true })); // Parse URL-encoded data

// ‚úÖ Health check endpoint (basic test)
app.get("/", (req, res) => {
  res.send("üöÑ IRCTC Clone Backend is Running!");
});

// ‚úÖ Register API routes
app.use("/api/auth", require("./routes/auth.routes"));         // üîê Login / Signup / Reset
app.use("/api/test", require("./routes/test.routes"));         // üîí Protected test route
app.use("/api/trains", require("./routes/train.routes"));      // üöÜ Train search APIs
app.use("/api/stations", require("./routes/station.routes"));  // üè¢ Stations list
app.use("/api/dev", require("./routes/dev.routes"));           // üõ†Ô∏è Dev/admin utilities
app.use("/api/bookings", require("./routes/booking.routes"));  // üéüÔ∏è Ticket booking logic

// ‚úÖ Connect to PostgreSQL via Supabase (with optional delay)
setTimeout(() => {
  db.sequelize.authenticate()
    .then(() => {
      console.log("‚úÖ PostgreSQL connected successfully.");

      // ‚ö†Ô∏è Avoid syncing unless you're controlling schema via Sequelize
      // return db.sequelize.sync({ alter: true });

      console.log("üõ†Ô∏è Skipping model sync. Using Supabase-managed schema.");

      // ‚úÖ Start Express server ‚Äî bind to 0.0.0.0 for Render hosting
      app.listen(PORT, '0.0.0.0', () => {
        console.log(`üöÄ Server is running on http://0.0.0.0:${PORT}`);
      });
    })
    .catch((err) => {
      console.error("‚ùå Unable to connect to PostgreSQL:", err);
    });
}, 3000); // ‚è≥ 3-second delay to avoid cold-start issues with Supabase
